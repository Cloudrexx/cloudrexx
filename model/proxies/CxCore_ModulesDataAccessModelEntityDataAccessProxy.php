<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesDataAccessModelEntityDataAccessProxy extends \Cx\Core_Modules\DataAccess\Model\Entity\DataAccess implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->_load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function setDataSource(\Cx\Core\DataSource\Model\Entity\DataSource $dataSource)
    {
        $this->_load();
        return parent::setDataSource($dataSource);
    }

    public function getDataSource()
    {
        $this->_load();
        return parent::getDataSource();
    }

    public function setFieldList($fieldList)
    {
        $this->_load();
        return parent::setFieldList($fieldList);
    }

    public function getFieldList()
    {
        $this->_load();
        return parent::getFieldList();
    }

    public function setAccessCondition($accessCondition)
    {
        $this->_load();
        return parent::setAccessCondition($accessCondition);
    }

    public function getAccessCondition()
    {
        $this->_load();
        return parent::getAccessCondition();
    }

    public function setAllowedOutputMethods($allowedOutputMethods)
    {
        $this->_load();
        return parent::setAllowedOutputMethods($allowedOutputMethods);
    }

    public function getAllowedOutputMethods()
    {
        $this->_load();
        return parent::getAllowedOutputMethods();
    }

    public function addDataAccessApiKeys(\Cx\Core_Modules\DataAccess\Model\Entity\DataAccessApiKey $dataAccessApiKeys)
    {
        $this->_load();
        return parent::addDataAccessApiKeys($dataAccessApiKeys);
    }

    public function getDataAccessApiKeys()
    {
        $this->_load();
        return parent::getDataAccessApiKeys();
    }

    public function setReadPermission(\Cx\Core_Modules\Access\Model\Entity\Permission $readPermission)
    {
        $this->_load();
        return parent::setReadPermission($readPermission);
    }

    public function getReadPermission()
    {
        $this->_load();
        return parent::getReadPermission();
    }

    public function setWritePermission(\Cx\Core_Modules\Access\Model\Entity\Permission $writePermission)
    {
        $this->_load();
        return parent::setWritePermission($writePermission);
    }

    public function getWritePermission()
    {
        $this->_load();
        return parent::getWritePermission();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'fieldList', 'accessCondition', 'allowedOutputMethods', 'dataAccessApiKeys', 'readPermission', 'writePermission', 'dataSource');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}