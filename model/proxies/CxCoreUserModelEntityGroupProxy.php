<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCoreUserModelEntityGroupProxy extends \Cx\Core\User\Model\Entity\Group implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getGroupId()
    {
        $this->_load();
        return parent::getGroupId();
    }

    public function setGroupName($groupName)
    {
        $this->_load();
        return parent::setGroupName($groupName);
    }

    public function getGroupName()
    {
        $this->_load();
        return parent::getGroupName();
    }

    public function setGroupDescription($groupDescription)
    {
        $this->_load();
        return parent::setGroupDescription($groupDescription);
    }

    public function getGroupDescription()
    {
        $this->_load();
        return parent::getGroupDescription();
    }

    public function setIsActive($isActive)
    {
        $this->_load();
        return parent::setIsActive($isActive);
    }

    public function getIsActive()
    {
        $this->_load();
        return parent::getIsActive();
    }

    public function setType($type)
    {
        $this->_load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->_load();
        return parent::getType();
    }

    public function setHomepage($homepage)
    {
        $this->_load();
        return parent::setHomepage($homepage);
    }

    public function getHomepage()
    {
        $this->_load();
        return parent::getHomepage();
    }

    public function addUser(\Cx\Core\User\Model\Entity\User $user)
    {
        $this->_load();
        return parent::addUser($user);
    }

    public function removeUser(\Cx\Core\User\Model\Entity\User $user)
    {
        $this->_load();
        return parent::removeUser($user);
    }

    public function getUser()
    {
        $this->_load();
        return parent::getUser();
    }

    public function addAccessId2(\Cx\Core_Modules\Access\Model\Entity\AccessId $accessId2)
    {
        $this->_load();
        return parent::addAccessId2($accessId2);
    }

    public function getAccessId2()
    {
        $this->_load();
        return parent::getAccessId2();
    }

    public function addAccessId(\Cx\Core_Modules\Access\Model\Entity\AccessId $accessId)
    {
        $this->_load();
        return parent::addAccessId($accessId);
    }

    public function getAccessId()
    {
        $this->_load();
        return parent::getAccessId();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'groupId', 'groupName', 'groupDescription', 'isActive', 'type', 'homepage', 'user', 'accessId2', 'accessId');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}