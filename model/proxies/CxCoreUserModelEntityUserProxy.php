<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCoreUserModelEntityUserProxy extends \Cx\Core\User\Model\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function setIsAdmin($isAdmin)
    {
        $this->_load();
        return parent::setIsAdmin($isAdmin);
    }

    public function getIsAdmin()
    {
        $this->_load();
        return parent::getIsAdmin();
    }

    public function setUsername($username)
    {
        $this->_load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->_load();
        return parent::getUsername();
    }

    public function setPassword($password)
    {
        $this->_load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->_load();
        return parent::getPassword();
    }

    public function setAuthToken($authToken)
    {
        $this->_load();
        return parent::setAuthToken($authToken);
    }

    public function getAuthToken()
    {
        $this->_load();
        return parent::getAuthToken();
    }

    public function setAuthTokenTimeout($authTokenTimeout)
    {
        $this->_load();
        return parent::setAuthTokenTimeout($authTokenTimeout);
    }

    public function getAuthTokenTimeout()
    {
        $this->_load();
        return parent::getAuthTokenTimeout();
    }

    public function setRegdate($regdate)
    {
        $this->_load();
        return parent::setRegdate($regdate);
    }

    public function getRegdate()
    {
        $this->_load();
        return parent::getRegdate();
    }

    public function setExpiration($expiration)
    {
        $this->_load();
        return parent::setExpiration($expiration);
    }

    public function getExpiration()
    {
        $this->_load();
        return parent::getExpiration();
    }

    public function setValidity($validity)
    {
        $this->_load();
        return parent::setValidity($validity);
    }

    public function getValidity()
    {
        $this->_load();
        return parent::getValidity();
    }

    public function setLastAuth($lastAuth)
    {
        $this->_load();
        return parent::setLastAuth($lastAuth);
    }

    public function getLastAuth()
    {
        $this->_load();
        return parent::getLastAuth();
    }

    public function setLastAuthStatus($lastAuthStatus)
    {
        $this->_load();
        return parent::setLastAuthStatus($lastAuthStatus);
    }

    public function getLastAuthStatus()
    {
        $this->_load();
        return parent::getLastAuthStatus();
    }

    public function setLastActivity($lastActivity)
    {
        $this->_load();
        return parent::setLastActivity($lastActivity);
    }

    public function getLastActivity()
    {
        $this->_load();
        return parent::getLastActivity();
    }

    public function setEmail($email)
    {
        $this->_load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->_load();
        return parent::getEmail();
    }

    public function setEmailAccess($emailAccess)
    {
        $this->_load();
        return parent::setEmailAccess($emailAccess);
    }

    public function getEmailAccess()
    {
        $this->_load();
        return parent::getEmailAccess();
    }

    public function setFrontendLangId($frontendLangId)
    {
        $this->_load();
        return parent::setFrontendLangId($frontendLangId);
    }

    public function getFrontendLangId()
    {
        $this->_load();
        return parent::getFrontendLangId();
    }

    public function setBackendLangId($backendLangId)
    {
        $this->_load();
        return parent::setBackendLangId($backendLangId);
    }

    public function getBackendLangId()
    {
        $this->_load();
        return parent::getBackendLangId();
    }

    public function setActive($active)
    {
        $this->_load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->_load();
        return parent::getActive();
    }

    public function setVerified($verified)
    {
        $this->_load();
        return parent::setVerified($verified);
    }

    public function getVerified()
    {
        $this->_load();
        return parent::getVerified();
    }

    public function setPrimaryGroup($primaryGroup)
    {
        $this->_load();
        return parent::setPrimaryGroup($primaryGroup);
    }

    public function getPrimaryGroup()
    {
        $this->_load();
        return parent::getPrimaryGroup();
    }

    public function setProfileAccess($profileAccess)
    {
        $this->_load();
        return parent::setProfileAccess($profileAccess);
    }

    public function getProfileAccess()
    {
        $this->_load();
        return parent::getProfileAccess();
    }

    public function setRestoreKey($restoreKey = NULL)
    {
        $this->_load();
        return parent::setRestoreKey($restoreKey);
    }

    public function getRestoreKey()
    {
        $this->_load();
        return parent::getRestoreKey();
    }

    public function setRestoreKeyTime($restoreKeyTime)
    {
        $this->_load();
        return parent::setRestoreKeyTime($restoreKeyTime);
    }

    public function getRestoreKeyTime()
    {
        $this->_load();
        return parent::getRestoreKeyTime();
    }

    public function setU2uActive($u2uActive)
    {
        $this->_load();
        return parent::setU2uActive($u2uActive);
    }

    public function getU2uActive()
    {
        $this->_load();
        return parent::getU2uActive();
    }

    public function setUserProfile(\Cx\Core\User\Model\Entity\UserProfile $userProfile)
    {
        $this->_load();
        return parent::setUserProfile($userProfile);
    }

    public function getUserProfile()
    {
        $this->_load();
        return parent::getUserProfile();
    }

    public function addGroup(\Cx\Core\User\Model\Entity\Group $group)
    {
        $this->_load();
        return parent::addGroup($group);
    }

    public function getGroup()
    {
        $this->_load();
        return parent::getGroup();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'isAdmin', 'username', 'password', 'authToken', 'authTokenTimeout', 'regdate', 'expiration', 'validity', 'lastAuth', 'lastAuthStatus', 'lastActivity', 'email', 'emailAccess', 'frontendLangId', 'backendLangId', 'active', 'verified', 'primaryGroup', 'profileAccess', 'restoreKey', 'restoreKeyTime', 'u2uActive', 'userProfile', 'group');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}