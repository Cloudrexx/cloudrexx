<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCoreMediaSourceModelEntityMediaSourceProxy extends \Cx\Core\MediaSource\Model\Entity\MediaSource implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->_load();
        return parent::setName($name);
    }

    public function getDirectory()
    {
        $this->_load();
        return parent::getDirectory();
    }

    public function getAccessIds()
    {
        $this->_load();
        return parent::getAccessIds();
    }

    public function setAccessIds($accessIds)
    {
        $this->_load();
        return parent::setAccessIds($accessIds);
    }

    public function checkAccess()
    {
        $this->_load();
        return parent::checkAccess();
    }

    public function getHumanName()
    {
        $this->_load();
        return parent::getHumanName();
    }

    public function setHumanName($humanName)
    {
        $this->_load();
        return parent::setHumanName($humanName);
    }

    public function getPosition()
    {
        $this->_load();
        return parent::getPosition();
    }

    public function setPosition($position)
    {
        $this->_load();
        return parent::setPosition($position);
    }

    public function getFileSystem()
    {
        $this->_load();
        return parent::getFileSystem();
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setIdentifier($identifier)
    {
        $this->_load();
        return parent::setIdentifier($identifier);
    }

    public function getIdentifier()
    {
        $this->_load();
        return parent::getIdentifier();
    }

    public function getType()
    {
        $this->_load();
        return parent::getType();
    }

    public function setOptions($options)
    {
        $this->_load();
        return parent::setOptions($options);
    }

    public function getOptions()
    {
        $this->_load();
        return parent::getOptions();
    }

    public function setDataAccesses(\Cx\Core_Modules\DataAccess\Model\Entity\DataAccess $dataAccesses)
    {
        $this->_load();
        return parent::setDataAccesses($dataAccesses);
    }

    public function getDataAccesses()
    {
        $this->_load();
        return parent::getDataAccesses();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'identifier', 'options', 'dataAccesses');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}