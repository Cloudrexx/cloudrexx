<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesContactModelEntityFormProxy extends \Cx\Core_Modules\Contact\Model\Entity\Form implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function setMails($mails)
    {
        $this->_load();
        return parent::setMails($mails);
    }

    public function setShowForm($showForm)
    {
        $this->_load();
        return parent::setShowForm($showForm);
    }

    public function setUseCaptcha($useCaptcha)
    {
        $this->_load();
        return parent::setUseCaptcha($useCaptcha);
    }

    public function setUseCustomStyle($useCustomStyle)
    {
        $this->_load();
        return parent::setUseCustomStyle($useCustomStyle);
    }

    public function setSaveDataInCrm($saveDataInCrm)
    {
        $this->_load();
        return parent::setSaveDataInCrm($saveDataInCrm);
    }

    public function setSendCopy($sendCopy)
    {
        $this->_load();
        return parent::setSendCopy($sendCopy);
    }

    public function setUseEmailOfSender($useEmailOfSender)
    {
        $this->_load();
        return parent::setUseEmailOfSender($useEmailOfSender);
    }

    public function setHtmlMail($htmlMail)
    {
        $this->_load();
        return parent::setHtmlMail($htmlMail);
    }

    public function setSendAttachment($sendAttachment)
    {
        $this->_load();
        return parent::setSendAttachment($sendAttachment);
    }

    public function setCrmCustomerGroups($crmCustomerGroups)
    {
        $this->_load();
        return parent::setCrmCustomerGroups($crmCustomerGroups);
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function getMails()
    {
        $this->_load();
        return parent::getMails();
    }

    public function getShowForm()
    {
        $this->_load();
        return parent::getShowForm();
    }

    public function getUseCaptcha()
    {
        $this->_load();
        return parent::getUseCaptcha();
    }

    public function getUseCustomStyle()
    {
        $this->_load();
        return parent::getUseCustomStyle();
    }

    public function getSaveDataInCrm()
    {
        $this->_load();
        return parent::getSaveDataInCrm();
    }

    public function getSendCopy()
    {
        $this->_load();
        return parent::getSendCopy();
    }

    public function getUseEmailOfSender()
    {
        $this->_load();
        return parent::getUseEmailOfSender();
    }

    public function getHtmlMail()
    {
        $this->_load();
        return parent::getHtmlMail();
    }

    public function getSendAttachment()
    {
        $this->_load();
        return parent::getSendAttachment();
    }

    public function getCrmCustomerGroups()
    {
        $this->_load();
        return parent::getCrmCustomerGroups();
    }

    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'mails', 'showForm', 'useCaptcha', 'useCustomStyle', 'saveDataInCrm', 'sendCopy', 'useEmailOfSender', 'htmlMail', 'sendAttachment', 'crmCustomerGroups');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}