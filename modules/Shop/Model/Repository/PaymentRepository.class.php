<?php

namespace Cx\Modules\Shop\Model\Repository;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Returns the countries related payment ID array.
     *
     * If PayPal is the selected payment method, any Currencies not supported
     * will be removed from the Currency array.
     * Returns the Payment IDs allowed for the given Country ID.
     * Note that the Payment IDs are used for both the keys and values
     * of the array returned, like:
     *  array(
     *    payment_id => payment_id,
     *    [...]
     *  )
     * @global  ADONewConnection  $objDatabase    Database connection object
     * @param    integer $countryId         The country ID
     * @param    array   $arrCurrencies     The currencies array, by reference
     * @return   array                      Array of Payment IDs
     */
    public function getCountriesRelatedPaymentIdArray($countryId, $arrCurrencies)
    {
        if (isset($_SESSION['shop']['paymentId'])) {
            $payment_id = $_SESSION['shop']['paymentId'];
            if (!empty($payment_id)) {
                $payment = $this->find($payment_id);
                $processor_id = $payment->getPaymentProcessor()->getId();
            }
            if ($processor_id == 2) {
                foreach ($arrCurrencies as $index => $arrCurrency) {
                    if (!\PayPal::isAcceptedCurrencyCode($arrCurrency['code'])) {
                        unset($arrCurrencies[$index]);
                    }
                }
            }
        }
        $payments = array();

        $qb = $this->_em->createQueryBuilder();
        $query = $qb->select('p.id', 'p.processorId')->from(
            'Cx\Modules\Shop\Model\Entity\RelCountry', 'c'
        )->join(
            'c.zone', 'z', 'WITH',
            $qb->expr()->eq('c.zoneId', 'z.id')
        )->join(
            'z.payments', 'p', 'WITH'
        )->where($qb->expr()->eq('c.countryId', '?1'))
         ->andWhere($qb->expr()->eq('p.active', '1'))
         ->andWhere($qb->expr()->eq('z.active', '1'))
         ->setParameter(1, intval($countryId))
         ->getQuery();
        $results = $query->getArrayResult();

        foreach ($results as $result) {
            if ($result['processorId'] != 2 || count($arrCurrencies)) {
                $paymentId = $result['id'];

                // the processor with the id 3 is postfinance and 11 is
                // postfinance mobile if it is one of them, it should only be
                // able to order when it is Switzerland
                if (in_array($result['processorId'], array(3, 11)) &&
                    \Cx\Core\Country\Controller\Country::getAlpha2ById($countryId) != 'CH'
                ) {
                    continue;
                }
                $payments[$paymentId] = $paymentId;
            }
        }
        return $payments;
    }
}
