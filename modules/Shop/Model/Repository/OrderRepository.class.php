<?php

namespace Cx\Modules\Shop\Model\Repository;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends \Doctrine\ORM\EntityRepository
{
    const STATUS_PENDING   = 0;
    const STATUS_CONFIRMED = 1;
    const STATUS_DELETED   = 2;
    const STATUS_CANCELLED = 3;
    const STATUS_COMPLETED = 4;
    const STATUS_PAID      = 5;
    const STATUS_SHIPPED   = 6;

    const STATUS_MAX = 6;

    /**
     * Get an array with all status values
     */
    public function getStatusValues()
    {
        global $_ARRAYLANG;

        $statusValues = array();
        for ($i = 0; $i <= $this::STATUS_MAX; $i++) {
            array_push(
                $statusValues,
                $_ARRAYLANG['TXT_SHOP_ORDER_STATUS_' . $i]
            );
        }

        return $statusValues;
    }

    /**
     * Deletes the Order with the given ID
     *
     * @param   integer   $id           The Order ID
     * @param   boolean   $updateStock  True to update stock of the product
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function deleteById($id, $updateStock = false)
    {
        $id = contrexx_input2int($id);
        if (empty($id)) {
            return;
        }

        $order = $this->findOneBy(array('id'=>$id));
        $objUser = \FWUser::getFWUserObject()->objUser;

        if ($order
            && $customer = $objUser->getUser($order->getCustomerId())) {
            $usernamePrefix = \Cx\Modules\Shop\Model\Entity\Orders::USERNAME_PREFIX;

            $customerEmail = $usernamePrefix ."_${$id}_%-"
                . $customer->getEmail();
            $allCustomerWithEmail = $objUser->getUsers(
                array('email' => $customerEmail)
            );

            foreach ($allCustomerWithEmail as $customerWithEmail) {
                $customerWithEmail->setActiveStatus(false);
            }

            $order->setStatus($this::STATUS_DELETED);
            $order->setModifiedBy(contrexx_raw2db($objUser->getUsername()));
            $order->setModifiedOn(new \DateTime('now'));

            if ($updateStock) {
                $this->updateStock($order);
            }

            $this->_em->persist($order);
            $this->_em->flush();
        }

    }

    /**
     * Update related product stock
     *
     * @param boolean $increaseStock True to increase stock, false to decrease
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    protected function updateStock($order, $increaseStock = true)
    {
        global $_ARRAYLANG;

        $items = $order->getOrderItems();

        foreach ($items as $item) {
            $product =  $item->getProduct();

            if (!$product) {
                \DBG::log(sprintf(
                    $_ARRAYLANG['TXT_SHOP_PRODUCT_NOT_FOUND'],
                    $product->getId()
                ));
                continue;
            }

            $stock = $product->getStock();
            if ($increaseStock) {
                $stock += $item->getQuantity();
            } else {
                $stock -= $item->getQuantity();
            }

            $product->setStock($stock);
            $this->_em->persist($product);
        }

        $this->_em->flush();
    }

    public function getFirstOrder()
    {
        $firstOrder = $this->findOneBy(array(), array('dateTime' => 'ASC'));

        return $firstOrder;
    }
}